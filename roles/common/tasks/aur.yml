- name: AUR | get metadata from AurJson api
  uri: >
    url=https://aur.archlinux.org/rpc/?v=5&type=info&arg[]={{ pkg_name | mandatory }}
    return_content=yes
    timeout=6
  register: api_info

- assert:
    that:
      - api_info.status == 200
      - api_info.json is defined
      - api_info.json.resultcount == 1
      - api_info.json.results is defined

- name: AUR | get installed package version
  shell: pacman -Q | grep {{ pkg_name }} | cut -d' ' -f2
  register: pacman_query_result

- name: AUR | Check if the AUR Version is already installed
  when: api_info.json.results.0.Version != pacman_query_result.stdout
  shell: echo "Needs Install"
  register: version_check_result

# it is very important to have versioning here, because get_url doesnt check for file differences or that 'force' is specified.
- name: AUR | {{ pkg_name }} | download tarball
  when: version_check_result.changed
  get_url: >
    url='https://aur.archlinux.org{{ api_info.json.results.0.URLPath }}'
    dest='{{source_dir}}/{{pkg_name}}-{{api_info.json.results.0.Version}}.tar.gz'
    force=yes
  register: aur_tarball

- name: AUR | {{ pkg_name }} | rm directory
  when: version_check_result.changed
  file:
    state: absent
    path: '{{build_dir}}/{{pkg_name}}'
  ignore_errors: yes

- name: AUR | {{ pkg_name }} | upload tarball to host and extract it
  when: version_check_result.changed
  unarchive:
    src: "{{ aur_tarball.dest }}"
    dest: '{{build_dir}}'
    remote_src: yes
  register: extracted_pkg

- name: AUR | Chown dirs
  file:
    path: "{{build_dir}}/{{pkg_name}}"
    state: directory
    owner: "{{ansible_user}}"
    recurse: yes

# This will break if run as root. Set user to use with makepkg with 'makepkg_user' var
- name: AUR | {{ pkg_name }} | build package, including missing dependencies
  when: version_check_result.changed
  become: yes
  become_user: "{{ansible_user}}"
  command: >
    makepkg --noconfirm --noprogressbar --skipchecksums --ignorearch -mfs
    chdir={{build_dir}}/{{ pkg_name }}
  register: aur_makepkg_result

- name: AUR | {{ pkg_name }} | install newly-built aur package with pacman
  when: version_check_result.changed
  shell: >
    pacman --noconfirm --noprogressbar --needed -U *.pkg.tar.xz
    chdir={{build_dir}}/{{ pkg_name }}
  register: pacman_install_result
  changed_when: pacman_install_result.stdout is defined and pacman_install_result.stdout.find('there is nothing to do') == -1
